name: CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

permissions:
  contents: 'read'
  id-token: 'write'

jobs:
  backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v5
        with:
          node-version: '18'
      - name: Install backend dependencies
        run: npm install
        working-directory: ./backend

      - name: Run backend tests
        run: npm ci && npm test && npm run lint
        working-directory: ./backend

  frontend:
    needs: backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v5
        with:
          node-version: '18'
      - name: Install frontend dependencies
        run: npm ci && npm test && npm run build
        working-directory: ./frontend

  terraform:
    needs: [frontend, backend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.0
      - name: Run terraform
        run: terraform init && terraform validate
        working-directory: ./terraform
  #     - uses: actions/setup-node@v5
  #       with:
  #         node-version: '18'
  #     - run: cd backend && npm ci && npm test
  #     - run: cd frontend && npm ci && npm test && npm run build
  #     - run: cd backend && npm run lint
  #       working-directory: ./backend

  # terraform:
  #   needs: build-and-test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v5
  #     - uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: 1.13.0
  #     - id: 'auth'
  #       uses: 'google-github-actions/auth@v3'
  #       with:
  #         workload_identity_provider: '${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}'
  #         service_account: '${{ secrets.GCP_SA_EMAIL }}'
  # - run: |
  #     cd terraform
  #     terraform init
  #     terraform validate
  #     terraform plan -var-file=dev.tfvars -out=tfplan
  #         terraform apply -auto-approve tfplan
  #       env:
  #         TF_VAR_gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}
  #         TF_VAR_gcp_region: us-central1

  # deploy:
  #   needs: [build-and-test, terraform]
  #   if: github.ref == 'refs/heads/main'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v5
  #     - id: 'auth'
  #       uses: 'google-github-actions/auth@v3'
  #       with:
  #         workload_identity_provider: '${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}'
  #         service_account: '${{ secrets.GCP_SA_EMAIL }}'
  #     - uses: 'google-github-actions/setup-gcloud@v2'
  #       with:
  #         project_id: '${{ secrets.GCP_PROJECT_ID }}'
  #     - run: |
  #         cd backend
  #         gcloud builds submit --tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/backend
  #         gcloud run deploy backend-service \
  #           --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/backend \
  #           --platform managed \
  #           --region us-central1 \
  #           --allow-unauthenticated
  #     - run: |
  #         cd frontend
  #         gcloud builds submit --tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/frontend
  #         gcloud run deploy frontend-service \
  #           --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/frontend \
  #           --platform managed \
  #           --region us-central1 \
  #           --port 80 \
  #           --allow-unauthenticated
